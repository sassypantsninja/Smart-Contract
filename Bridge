// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function mint(address recipient, uint256 amount) external;
    function burn(address account, uint256 amount) external;
}

contract TokenBridge {
    address public admin;
    IERC20 public token;
    mapping(bytes32 => bool) public processedNonces;

    event Transfer(
        address from,
        address to,
        uint256 amount,
        uint256 date,
        bytes32 nonce,
        bytes signature
    );

    constructor(address _token) {
        admin = msg.sender;
        token = IERC20(_token);
    }

    function transfer(
        address to,
        uint256 amount,
        uint256 nonce,
        bytes calldata signature
    ) external {
        bytes32 message = prefixed(keccak256(abi.encodePacked(
            msg.sender,
            to,
            amount,
            nonce
        )));
        require(recoverSigner(message, signature) == admin, 'wrong signature');
        require(processedNonces[message] == false, 'transfer already processed');
        processedNonces[message] = true;
        token.transferFrom(msg.sender, address(this), amount);
        emit Transfer(
            msg.sender,
            to,
            amount,
            block.timestamp,
            message,
            signature
        );
    }

    function mint(
        address to,
        uint256 amount,
        uint256 nonce,
        bytes calldata signature
    ) external {
        bytes32 message = prefixed(keccak256(abi.encodePacked(
            msg.sender,
            to,
            amount,
            nonce
        )));
        require(recoverSigner(message, signature) == admin, 'wrong signature');
        require(processedNonces[message] == false, 'transfer already processed');
        processedNonces[message] = true;
        token.mint(to, amount);
    }

    function burn(
        address from,
        uint256 amount,
        uint256 nonce,
        bytes calldata signature
    ) external {
        bytes32 message = prefixed(keccak256(abi.encodePacked(
            from,
            msg.sender,
            amount,
            nonce
        )));
        require(recoverSigner(message, signature) == admin, 'wrong signature');
        require(processedNonces[message] == false, 'transfer already processed');
        processedNonces[message] = true;
        token.burn(from, amount);
    }

    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {
        uint8 v;
        bytes32 r;
        bytes32 s;

        (v, r, s) = splitSignature(sig);

        return ecrecover(message, v, r, s);
    }

    function splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32) {
        require(sig.length == 65, "Invalid signature length");

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            v := byte(0, mload(add(sig, 96)))
        }

        return (v, r, s);
    }
}
