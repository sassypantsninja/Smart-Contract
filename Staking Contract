// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StakingContract {
    // Address of the token to be staked
    address public tokenAddress;

    // Staking period in seconds
    uint256 public stakingPeriod;

    // Mapping to track staked amounts for each user
    mapping(address => uint256) public stakedAmounts;

    // Mapping to track staking start time for each user
    mapping(address => uint256) public stakingStartTimes;

    // Event emitted when a user stakes tokens
    event Staked(address indexed user, uint256 amount, uint256 startTime);

    // Event emitted when a user unstakes tokens
    event Unstaked(address indexed user, uint256 amount, uint256 endTime);

    constructor(address _tokenAddress, uint256 _stakingPeriod) {
        tokenAddress = _tokenAddress;
        stakingPeriod = _stakingPeriod;
    }

    // Function to allow users to stake tokens
    function stake(uint256 _amount) external {
        require(_amount > 0, "Staking amount must be greater than 0");

        // Transfer tokens from user to the contract
        // (Assuming standard ERC-20 transfer function)
        // require(Token(tokenAddress).transferFrom(msg.sender, address(this), _amount));

        // Update staked amount and start time for the user
        stakedAmounts[msg.sender] += _amount;
        stakingStartTimes[msg.sender] = block.timestamp;

        // Emit the Staked event
        emit Staked(msg.sender, _amount, block.timestamp);
    }

    // Function to allow users to unstake tokens
    function unstake() external {
        require(stakedAmounts[msg.sender] > 0, "No tokens staked");

        // Calculate the staking duration
        uint256 stakingDuration = block.timestamp - stakingStartTimes[msg.sender];

        require(stakingDuration >= stakingPeriod, "Staking period not completed");

        // Transfer staked tokens back to the user
        // require(Token(tokenAddress).transfer(msg.sender, stakedAmounts[msg.sender]));

        // Emit the Unstaked event
        emit Unstaked(msg.sender, stakedAmounts[msg.sender], block.timestamp);

        // Reset staked amount and start time for the user
        stakedAmounts[msg.sender] = 0;
        stakingStartTimes[msg.sender] = 0;
    }
}
