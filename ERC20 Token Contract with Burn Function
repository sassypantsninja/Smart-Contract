// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract BurnableTokenAndMintableNFT is ERC20, ERC721, Ownable {
    uint256 public nextTokenId;
    
    event NFTMinted(address to, uint256 tokenId, uint256 burnAmount);

    constructor(uint256 initialSupply) 
        ERC20("BurnableToken", "BTK") 
        ERC721("MintableNFT", "MNFT") 
    {
        _mint(msg.sender, initialSupply);
    }

    function burn(uint256 amount) internal {
        _burn(msg.sender, amount);
    }

    function mintNFT(address to, uint256 burnAmount) public onlyOwner {
        require(balanceOf(msg.sender) >= burnAmount, "Insufficient balance to burn");

        uint256 tokenId = nextTokenId;
        nextTokenId++;
        
        _mint(to, tokenId);
        burn(burnAmount);

        emit NFTMinted(to, tokenId, burnAmount);
    }
}
