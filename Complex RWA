// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RwaToken is ERC721, Ownable {
    uint256 private tokenIdCounter;

    struct Asset {
        string name;
        string assetType;
        string location;
        uint256 value;
        bool verified;
        address owner;
    }

    mapping(uint256 => Asset) public assets;

    constructor() ERC721("RWA Token", "RWA") {}

    // Function to mint a new RWA token
    function mint(address to, string memory name, string memory assetType, string memory location, uint256 value) external onlyOwner {
        uint256 tokenId = tokenIdCounter++;
        _mint(to, tokenId);
        assets[tokenId] = Asset(name, assetType, location, value, false, to);
    }

    // Function to verify ownership of an asset
    function verifyOwnership(uint256 tokenId) external {
        require(ownerOf(tokenId) == msg.sender, "You are not the owner of this asset");
        assets[tokenId].verified = true;
    }

    // Function to transfer ownership of an asset
    function transferOwnership(uint256 tokenId, address newOwner) external {
        require(ownerOf(tokenId) == msg.sender, "You are not the owner of this asset");
        safeTransferFrom(msg.sender, newOwner, tokenId);
        assets[tokenId].owner = newOwner;
    }

    // Function to update asset information
    function updateAsset(uint256 tokenId, string memory name, string memory assetType, string memory location, uint256 value) external {
        require(ownerOf(tokenId) == msg.sender, "You are not the owner of this asset");
        assets[tokenId] = Asset(name, assetType, location, value, assets[tokenId].verified, msg.sender);
    }
}
