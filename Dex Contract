// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract DecentralizedExchange {
    using SafeMath for uint256;

    mapping(address => mapping(address => uint256)) public balances;
    mapping(address => bool) public supportedTokens;

    event Deposit(address indexed sender, address indexed token, uint256 amount);
    event Withdrawal(address indexed recipient, address indexed token, uint256 amount);
    event Swap(address indexed sender, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);

    function deposit(address token, uint256 amount) external {
        require(supportedTokens[token], "Token not supported");
        IERC20(token).transferFrom(msg.sender, address(this), amount);
        balances[msg.sender][token] = balances[msg.sender][token].add(amount);
        emit Deposit(msg.sender, token, amount);
    }

    function withdraw(address token, uint256 amount) external {
        require(balances[msg.sender][token] >= amount, "Insufficient balance");
        balances[msg.sender][token] = balances[msg.sender][token].sub(amount);
        IERC20(token).transfer(msg.sender, amount);
        emit Withdrawal(msg.sender, token, amount);
    }

    function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut) external {
        require(supportedTokens[tokenIn] && supportedTokens[tokenOut], "Tokens not supported");
        require(balances[msg.sender][tokenIn] >= amountIn, "Insufficient balance");

        // Perform token swap
        balances[msg.sender][tokenIn] = balances[msg.sender][tokenIn].sub(amountIn);
        balances[msg.sender][tokenOut] = balances[msg.sender][tokenOut].add(amountOut);

        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amountOut);
    }

    function addSupportedToken(address token) external {
        supportedTokens[token] = true;
    }

    function removeSupportedToken(address token) external {
        supportedTokens[token] = false;
    }
}
