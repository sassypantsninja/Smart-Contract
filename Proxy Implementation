// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Proxy {
    address public admin;
    address public implementation;

    event ImplementationUpdated(address indexed oldImplementation, address indexed newImplementation);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    constructor(address _implementation) {
        admin = msg.sender;
        implementation = _implementation;
    }

    function upgradeImplementation(address _newImplementation) external onlyAdmin {
        require(_newImplementation != address(0), "Invalid implementation address");
        require(_newImplementation != implementation, "Same implementation address");

        address oldImplementation = implementation;
        implementation = _newImplementation;

        emit ImplementationUpdated(oldImplementation, _newImplementation);
    }

    fallback() external payable {
        address _implementation = implementation;

        assembly {
            let ptr := mload(0x40)
            calldatacopy(ptr, 0, calldatasize())

            // Forward the call to the implementation contract
            let result := delegatecall(gas(), _implementation, ptr, calldatasize(), 0, 0)

            // Check the result of the delegatecall and revert if it failed
            switch result
            case 0 {
                revert(0, 0)
            }
            default {
                // Return the result
                let size := returndatasize()
                returndatacopy(ptr, 0, size)
                return(ptr, size)
            }
        }
    }
}
