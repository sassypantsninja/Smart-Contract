// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MultiSigWallet {
    address[] public owners;
    uint256 public requiredSignatures;
    uint256 public transactionCount;

    struct Transaction {
        address to;
        uint256 value;
        bytes data;
        bool executed;
        uint256 signatureCount;
    }

    mapping(address => bool) public isOwner;
    mapping(uint256 => mapping(address => bool)) public signatures;
    mapping(uint256 => Transaction) public transactions;

    event Deposit(address indexed sender, uint256 value);
    event TransactionCreated(uint256 indexed transactionId, address indexed to, uint256 value, bytes data);
    event TransactionSigned(uint256 indexed transactionId, address indexed owner);
    event TransactionExecuted(uint256 indexed transactionId, address indexed to, uint256 value, bytes data);

    modifier onlyOwner() {
        require(isOwner[msg.sender], "Not an owner");
        _;
    }

    modifier transactionExists(uint256 transactionId) {
        require(transactions[transactionId].to != address(0), "Transaction does not exist");
        _;
    }

    modifier notExecuted(uint256 transactionId) {
        require(!transactions[transactionId].executed, "Transaction already executed");
        _;
    }

    modifier notSigned(uint256 transactionId) {
        require(!signatures[transactionId][msg.sender], "Transaction already signed");
        _;
    }

    constructor(address[] memory _owners, uint256 _requiredSignatures) {
        require(_owners.length == 10, "There must be exactly 10 owners");
        require(_requiredSignatures <= _owners.length, "Invalid number of required signatures");
        require(_requiredSignatures > 0, "At least one signature is required");

        for (uint256 i = 0; i < _owners.length; i++) {
            address owner = _owners[i];
            require(owner != address(0), "Invalid owner");
            require(!isOwner[owner], "Owner is not unique");

            isOwner[owner] = true;
            owners.push(owner);
        }
        requiredSignatures = _requiredSignatures;
    }

    receive() external payable {
        emit Deposit(msg.sender, msg.value);
    }

    function createTransaction(address to, uint256 value, bytes calldata data) external onlyOwner {
        uint256 transactionId = transactionCount++;
        transactions[transactionId] = Transaction({
            to: to,
            value: value,
            data: data,
            executed: false,
            signatureCount: 0
        });

        emit TransactionCreated(transactionId, to, value, data);
    }

    function signTransaction(uint256 transactionId)
        external
        onlyOwner
        transactionExists(transactionId)
        notExecuted(transactionId)
        notSigned(transactionId)
    {
        Transaction storage transaction = transactions[transactionId];
        signatures[transactionId][msg.sender] = true;
        transaction.signatureCount++;

        emit TransactionSigned(transactionId, msg.sender);

        if (transaction.signatureCount >= requiredSignatures) {
            executeTransaction(transactionId);
        }
    }

    function executeTransaction(uint256 transactionId)
        internal
        transactionExists(transactionId)
        notExecuted(transactionId)
    {
        Transaction storage transaction = transactions[transactionId];

        transaction.executed = true;
        (bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);
        require(success, "Transaction failed");

        emit TransactionExecuted(transactionId, transaction.to, transaction.value, transaction.data);
    }

    function getTransaction(uint256 transactionId)
        external
        view
        returns (
            address to,
            uint256 value,
            bytes memory data,
            bool executed,
            uint256 signatureCount
        )
    {
        Transaction storage transaction = transactions[transactionId];
        return (transaction.to, transaction.value, transaction.data, transaction.executed, transaction.signatureCount);
    }
}
