// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MemeCoin is ERC20, Ownable {
    // Maximum supply of the memecoin
    uint256 private constant MAX_SUPPLY = 1000000000 * 10**18; // 1 billion tokens

    // Address to store the reserve fund
    address private reserveFund;

    // Events
    event ReserveFundUpdated(address indexed newReserveFund);

    // Constructor
    constructor(string memory _name, string memory _symbol, address _reserveFund) ERC20(_name, _symbol) {
        require(_reserveFund != address(0), "Invalid reserve fund address");

        reserveFund = _reserveFund;

        // Mint initial supply to the contract creator
        _mint(msg.sender, 500000000 * 10**18); // Minting 500 million tokens initially
    }

    // Function to mint additional tokens (only callable by the owner)
    function mint(address account, uint256 amount) external onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Exceeds maximum supply");
        _mint(account, amount);
    }

    // Function to update the reserve fund address (only callable by the owner)
    function updateReserveFund(address newReserveFund) external onlyOwner {
        require(newReserveFund != address(0), "Invalid reserve fund address");
        reserveFund = newReserveFund;
        emit ReserveFundUpdated(newReserveFund);
    }

    // Function to transfer tokens to the reserve fund
    function transferToReserveFund(uint256 amount) external onlyOwner {
        _transfer(_msgSender(), reserveFund, amount);
    }
}
